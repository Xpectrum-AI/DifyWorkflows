app:
  description: ''
  icon: ü§ñ
  icon_background: '#FFEAD5'
  mode: workflow
  name: Demo_AssignUnit
  use_icon_as_answer_icon: false
dependencies: []
kind: app
version: 0.3.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: f781fcb6-7036-45b2-83fd-3341844bd867
    name: APALEO_CLIENT_SECRET
    selector:
    - env
    - APALEO_CLIENT_SECRET
    value: QxKL6ljtZVfhUhUh9sEKg2FL7Dv13j
    value_type: secret
  - description: ''
    id: 78d81921-a387-4604-a4b0-da8fe4c74b91
    name: APALEO_CLIENT_ID
    selector:
    - env
    - APALEO_CLIENT_ID
    value: IJKE-SP-MYSPOT
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: http-request
        targetType: code
      id: 1758772911049-source-1758772924842-target
      source: '1758772911049'
      sourceHandle: source
      target: '1758772924842'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: start
        targetType: code
      id: 1758772893798-source-17587733257940-target
      source: '1758772893798'
      sourceHandle: source
      target: '17587733257940'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1758772924842-source-1758774359371-target
      source: '1758772924842'
      sourceHandle: source
      target: '1758774359371'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: http-request
      id: 17587733257940-source-1758772911049-target
      source: '17587733257940'
      sourceHandle: source
      target: '1758772911049'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: Start
        type: start
        variables:
        - label: reservation_id
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: reservation_id
      height: 90
      id: '1758772893798'
      position:
        x: 80
        y: 282
      positionAbsolute:
        x: 80
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        authorization:
          config:
            api_key: '{{#17587733257940.access_token#}}'
            type: bearer
          type: api-key
        body:
          data: []
          type: none
        desc: ''
        headers: ''
        method: put
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        ssl_verify: true
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: HTTP Request
        type: http-request
        url: https://api.apaleo.com/booking/v1/reservation-actions/{{#1758772893798.reservation_id#}}/assign-unit
        variables: []
      height: 145
      id: '1758772911049'
      position:
        x: 903.2105856905882
        y: 282
      positionAbsolute:
        x: 903.2105856905882
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nfrom collections import OrderedDict\n\ndef main(body:\
          \ str, status_code: int):\n    \"\"\"\n    Input:\n      body: HTTP node\
          \ response body (string)\n      status_code: HTTP node status code (int)\n\
          \    Output:\n      {\"message\": \"...\"}  # single, guest-facing message\n\
          \    \"\"\"\n\n    # Try to parse JSON (body may be empty on success; some\
          \ responses return the assigned timeSlices)\n    data = {}\n    if body:\n\
          \        try:\n            data = json.loads(body) if isinstance(body, str)\
          \ else body\n        except Exception:\n            data = {\"__raw__\"\
          : body}\n\n    # Success branch\n    if 200 <= status_code < 300:\n    \
          \    # Collect assigned units from timeSlices (typically all slices have\
          \ the same unit)\n        time_slices = data.get(\"timeSlices\") if isinstance(data,\
          \ dict) else None\n\n        # Helper: extract overall stay window\n   \
          \     def _stay_window(slices):\n            if not slices:\n          \
          \      return (\"\", \"\")\n            # first 'from' and last 'to'\n \
          \           first_from = slices[0].get(\"from\", \"\")\n            last_to\
          \ = slices[-1].get(\"to\", \"\")\n            return (first_from, last_to)\n\
          \n        if isinstance(time_slices, list) and time_slices:\n          \
          \  # Build an ordered map of unitId -> {name, description, unitGroupId}\n\
          \            units_map = OrderedDict()\n            for ts in time_slices:\n\
          \                unit = ts.get(\"unit\") or {}\n                uid = unit.get(\"\
          id\")\n                if uid and uid not in units_map:\n              \
          \      units_map[uid] = {\n                        \"name\": unit.get(\"\
          name\", \"\"),\n                        \"description\": unit.get(\"description\"\
          , \"\"),\n                        \"unitGroupId\": unit.get(\"unitGroupId\"\
          , \"\")\n                    }\n\n            checkin_iso, checkout_iso\
          \ = _stay_window(time_slices)\n\n            # Compose message for one or\
          \ multiple units\n            lines = [\"‚úÖ Your room has been assigned successfully!\"\
          ]\n            if checkin_iso or checkout_iso:\n                lines.append(f\"\
          - Stay: {checkin_iso} ‚Üí {checkout_iso}\")\n\n            if len(units_map)\
          \ == 1:\n                # Single unit assigned (most common)\n        \
          \        uid, info = next(iter(units_map.items()))\n                room_line\
          \ = f\"- Room: {info.get('name') or uid}\"\n                if info.get(\"\
          name\") and uid:\n                    room_line += f\" (ID: {uid})\"\n \
          \               lines.append(room_line)\n\n                if info.get(\"\
          description\"):\n                    lines.append(f\"  Description: {info['description']}\"\
          )\n                if info.get(\"unitGroupId\"):\n                    lines.append(f\"\
          \  Unit Group: {info['unitGroupId']}\")\n            else:\n           \
          \     # Multiple distinct units (edge case; list all)\n                lines.append(\"\
          - Assigned rooms:\")\n                for uid, info in units_map.items():\n\
          \                    base = info.get(\"name\") or uid\n                \
          \    extra = []\n                    if info.get(\"description\"):\n   \
          \                     extra.append(info[\"description\"])\n            \
          \        if info.get(\"unitGroupId\"):\n                        extra.append(f\"\
          Group: {info['unitGroupId']}\")\n                    suffix = f\" ‚Äî {',\
          \ '.join(extra)}\" if extra else \"\"\n                    lines.append(f\"\
          \  ‚Ä¢ {base} (ID: {uid}){suffix}\")\n\n            lines.append(\"If you\
          \ prefer a different room, we can reassign another one based on availability.\"\
          )\n            return {\"message\": \"\\n\".join(lines)}\n\n        # No\
          \ timeSlices provided but HTTP 2xx: keep it friendly and generic\n     \
          \   return {\n            \"message\": (\n                \"‚úÖ Your room\
          \ has been assigned successfully.\\n\"\n                \"If you would like\
          \ the room number and details, please allow a moment and try again, \"\n\
          \                \"or let us know and we will confirm them for you.\"\n\
          \            )\n        }\n\n    # Failure branch ‚Äî surface helpful details\n\
          \    err = \"\"\n    if isinstance(data, dict):\n        msgs = data.get(\"\
          messages\") or data.get(\"validationMessages\")\n        if isinstance(msgs,\
          \ list) and msgs:\n            err = \"; \".join(str(m) for m in msgs)\n\
          \        elif data.get(\"error_description\"):\n            err = data[\"\
          error_description\"]\n        elif data.get(\"title\"):\n            err\
          \ = data[\"title\"]\n        elif data.get(\"error\"):\n            err\
          \ = data[\"error\"]\n        elif data.get(\"__raw__\"):\n            err\
          \ = data[\"__raw__\"]\n        else:\n            err = json.dumps(data)[:300]\n\
          \    else:\n        err = (body or \"\")[:300]\n\n    return {\n       \
          \ \"message\": (\n            f\"‚ùå Unfortunately, the room assignment could\
          \ not be completed (HTTP {status_code}).\\n\"\n            f\"Details: {err}\\\
          n\"\n            \"Please verify reservation status, room availability,\
          \ and API scopes, then try again.\"\n        )\n    }"
        code_language: python3
        desc: ''
        outputs:
          message:
            children: null
            type: string
        selected: false
        title: Code 3
        type: code
        variables:
        - value_selector:
          - '1758772911049'
          - body
          variable: body
        - value_selector:
          - '1758772911049'
          - status_code
          variable: status_code
      height: 54
      id: '1758772924842'
      position:
        x: 1300.1297402004377
        y: 282
      positionAbsolute:
        x: 1300.1297402004377
        y: 282
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import requests\nimport base64\n\ndef main(client_id: str, client_secret:\
          \ str, scope: str = \"\"):\n    \"\"\"\n    Args:\n        client_id: Apaleo\
          \ Client ID Ôºà‰Ω†Ë¶Å‰º†ÂÖ•ÁöÑ idÔºâ\n        client_secret: Apaleo Client Secret Ôºà‰Ω†Ë¶Å‰º†ÂÖ•ÁöÑ\
          \ secretÔºâ\n        scope: ÂèØÈÄâÔºåÂª∫ËÆÆ‰º†‰∏é‰Ω† App ÊùÉÈôê‰∏ÄËá¥ÁöÑ scopesÔºåÁî®Á©∫Ê†ºÂàÜÈöî\n            \
          \   ‰æã: \"inventory.read booking.read reservations.read reservations.write\
          \ booking.write\"\n    Returns:\n        {\n          \"access_token\":\
          \ \"<token or empty>\",\n          \"http_status\": <int>,\n          \"\
          error\": \"<error code if any>\",\n          \"error_description\": \"<human\
          \ readable if any>\",\n          \"raw\": \"<first 500 chars of body>\"\n\
          \        }\n    \"\"\"\n    url = \"https://identity.apaleo.com/connect/token\"\
          \n\n    # Basic Auth: base64(id:secret)\n    raw = f\"{client_id.strip()}:{client_secret.strip()}\"\
          .encode(\"utf-8\")\n    b64 = base64.b64encode(raw).decode(\"utf-8\")\n\n\
          \    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\
          ,\n        \"Authorization\": f\"Basic {b64}\",\n    }\n\n    data = {\"\
          grant_type\": \"client_credentials\"}\n    if scope and scope.strip():\n\
          \        data[\"scope\"] = scope.strip()\n\n    try:\n        resp = requests.post(url,\
          \ headers=headers, data=data, timeout=20)\n    except Exception as e:\n\
          \        return {\n            \"access_token\": \"\",\n            \"http_status\"\
          : 0,\n            \"error\": \"request_exception\",\n            \"error_description\"\
          : str(e),\n            \"raw\": \"\"\n        }\n\n    text = resp.text\
          \ or \"\"\n    # Â∞ùËØï JSON Ëß£Êûê\n    try:\n        body = resp.json()\n    except\
          \ Exception:\n        body = {}\n\n    token = body.get(\"access_token\"\
          , \"\") if isinstance(body, dict) else \"\"\n    error = body.get(\"error\"\
          , \"\") if isinstance(body, dict) else \"\"\n    error_desc = body.get(\"\
          error_description\", \"\") if isinstance(body, dict) else \"\"\n\n    #\
          \ Âè™Ë¶ÅÊàêÂäüËøîÂõûÂ∞±Áªô tokenÔºõÂê¶ÂàôÊääÈîôËØØ‰ø°ÊÅØÂ∏¶‰∏ä\n    return {\n        \"access_token\": token\n\
          \    }"
        code_language: python3
        desc: ''
        outputs:
          access_token:
            children: null
            type: string
        selected: false
        title: GetToken
        type: code
        variables:
        - value_selector:
          - env
          - APALEO_CLIENT_SECRET
          variable: client_secret
        - value_selector:
          - env
          - APALEO_CLIENT_ID
          variable: client_id
      height: 54
      id: '17587733257940'
      position:
        x: 466.469490588551
        y: 282
      positionAbsolute:
        x: 466.469490588551
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1758772924842'
          - message
          variable: message
        selected: false
        title: End
        type: end
      height: 90
      id: '1758774359371'
      position:
        x: 1600
        y: 282
      positionAbsolute:
        x: 1600
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -501.95076514375756
      y: 412.63652717653383
      zoom: 0.4842919658209974
