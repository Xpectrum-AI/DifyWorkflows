app:
  description: ''
  icon: ü§ñ
  icon_background: '#FFEAD5'
  mode: workflow
  name: Demo_MakeOffer
  use_icon_as_answer_icon: false
dependencies: []
kind: app
version: 0.3.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: f781fcb6-7036-45b2-83fd-3341844bd867
    name: APALEO_CLIENT_SECRET
    selector:
    - env
    - APALEO_CLIENT_SECRET
    value: QxKL6ljtZVfhUhUh9sEKg2FL7Dv13j
    value_type: secret
  - description: ''
    id: 78d81921-a387-4604-a4b0-da8fe4c74b91
    name: APALEO_CLIENT_ID
    selector:
    - env
    - APALEO_CLIENT_ID
    value: IJKE-SP-MYSPOT
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInLoop: false
        sourceType: start
        targetType: code
      id: 1758772893798-source-17587733257940-target
      source: '1758772893798'
      sourceHandle: source
      target: '17587733257940'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: code
      id: 17587733257940-source-1758772906371-target
      source: '17587733257940'
      sourceHandle: source
      target: '1758772906371'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1758772906371-source-1758776454532-target
      source: '1758772906371'
      sourceHandle: source
      target: '1758776454532'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: end
      id: 1758776454532-source-1758774359371-target
      source: '1758776454532'
      sourceHandle: source
      target: '1758774359371'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: Start
        type: start
        variables:
        - label: arrival_date
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: arrival_date
        - label: departure_date
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: departure_date
        - label: number_of_adults
          max_length: 48
          options: []
          required: true
          type: number
          variable: number_of_adults
        - label: property_id
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: property_id
        - label: number_of_unit
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: number_of_unit
      height: 194
      id: '1758772893798'
      position:
        x: 80
        y: 282
      positionAbsolute:
        x: 80
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport requests\n\nOFFERS_URL = \"https://api.apaleo.com/booking/v1/offers\"\
          \n\ndef main(access_token: str,\n         property_id: str,\n         arrival_date:\
          \ str,\n         departure_date: str,\n         number_of_adu: int,\n  \
          \       units: int = 1):\n    \"\"\"\n    Fetch offers for a property and\
          \ return the most expensive one.\n\n    Inputs:\n        access_token: Bearer\
          \ token for Apaleo\n        property_id: Apaleo property ID\n        arrival_date:\
          \ YYYY-MM-DD\n        departure_date: YYYY-MM-DD\n        number_of_adu:\
          \ number of adults\n        units: number of rooms (default 1)\n\n    Output:\n\
          \        {\"offer\": \"<json-string of the selected offer>\"}\n    \"\"\"\
          \n    # 1) Request offers\n    headers = {\n        \"Authorization\": f\"\
          Bearer {access_token}\",\n        \"Accept\": \"application/json\",\n  \
          \  }\n    params = {\n        \"propertyId\": property_id,\n        \"arrival\"\
          : arrival_date,\n        \"departure\": departure_date,\n        \"adults\"\
          : number_of_adu,\n        \"units\": units,\n        \"includeClosed\":\
          \ \"false\",\n        \"includeUnavailable\": \"false\",\n    }\n\n    resp\
          \ = requests.get(OFFERS_URL, headers=headers, params=params, timeout=30)\n\
          \    try:\n        resp.raise_for_status()\n    except requests.HTTPError\
          \ as e:\n        raise RuntimeError(f\"Failed to fetch offers: HTTP {resp.status_code}\
          \ | {resp.text[:500]}\") from e\n\n    payload = resp.json() or {}\n   \
          \ offers = payload.get(\"offers\", [])\n    if not isinstance(offers, list)\
          \ or not offers:\n        raise RuntimeError(\"No offers returned for the\
          \ given criteria.\")\n\n    # 2) Pick the most expensive offer (by totalGrossAmount.amount)\n\
          \    def total_amount(o):\n        amt = (o.get(\"totalGrossAmount\") or\
          \ {}).get(\"amount\")\n        try:\n            return float(amt)\n   \
          \     except Exception:\n            return -1.0  # treat malformed amounts\
          \ as very low\n\n    offers_sorted = sorted(offers, key=total_amount, reverse=True)\n\
          \    top_offer = offers_sorted[0]\n\n    # 3) Return ONLY one field \"offer\"\
          \ as a JSON string\n    return {\"offer\": json.dumps(top_offer)}"
        code_language: python3
        desc: ''
        outputs:
          offer:
            children: null
            type: string
        selected: false
        title: Code 2
        type: code
        variables:
        - value_selector:
          - '1758772893798'
          - arrival_date
          variable: arrival_date
        - value_selector:
          - '1758772893798'
          - departure_date
          variable: departure_date
        - value_selector:
          - '1758772893798'
          - number_of_adults
          variable: number_of_adu
        - value_selector:
          - '1758772893798'
          - property_id
          variable: property_id
        - value_selector:
          - '17587733257940'
          - access_token
          variable: access_token
        - value_selector:
          - '1758772893798'
          - number_of_unit
          variable: units
      height: 54
      id: '1758772906371'
      position:
        x: 688
        y: 282
      positionAbsolute:
        x: 688
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import requests\nimport base64\n\ndef main(client_id: str, client_secret:\
          \ str, scope: str = \"\"):\n    \"\"\"\n    Args:\n        client_id: Apaleo\
          \ Client ID Ôºà‰Ω†Ë¶Å‰º†ÂÖ•ÁöÑ idÔºâ\n        client_secret: Apaleo Client Secret Ôºà‰Ω†Ë¶Å‰º†ÂÖ•ÁöÑ\
          \ secretÔºâ\n        scope: ÂèØÈÄâÔºåÂª∫ËÆÆ‰º†‰∏é‰Ω† App ÊùÉÈôê‰∏ÄËá¥ÁöÑ scopesÔºåÁî®Á©∫Ê†ºÂàÜÈöî\n            \
          \   ‰æã: \"inventory.read booking.read reservations.read reservations.write\
          \ booking.write\"\n    Returns:\n        {\n          \"access_token\":\
          \ \"<token or empty>\",\n          \"http_status\": <int>,\n          \"\
          error\": \"<error code if any>\",\n          \"error_description\": \"<human\
          \ readable if any>\",\n          \"raw\": \"<first 500 chars of body>\"\n\
          \        }\n    \"\"\"\n    url = \"https://identity.apaleo.com/connect/token\"\
          \n\n    # Basic Auth: base64(id:secret)\n    raw = f\"{client_id.strip()}:{client_secret.strip()}\"\
          .encode(\"utf-8\")\n    b64 = base64.b64encode(raw).decode(\"utf-8\")\n\n\
          \    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\
          ,\n        \"Authorization\": f\"Basic {b64}\",\n    }\n\n    data = {\"\
          grant_type\": \"client_credentials\"}\n    if scope and scope.strip():\n\
          \        data[\"scope\"] = scope.strip()\n\n    try:\n        resp = requests.post(url,\
          \ headers=headers, data=data, timeout=20)\n    except Exception as e:\n\
          \        return {\n            \"access_token\": \"\",\n            \"http_status\"\
          : 0,\n            \"error\": \"request_exception\",\n            \"error_description\"\
          : str(e),\n            \"raw\": \"\"\n        }\n\n    text = resp.text\
          \ or \"\"\n    # Â∞ùËØï JSON Ëß£Êûê\n    try:\n        body = resp.json()\n    except\
          \ Exception:\n        body = {}\n\n    token = body.get(\"access_token\"\
          , \"\") if isinstance(body, dict) else \"\"\n    error = body.get(\"error\"\
          , \"\") if isinstance(body, dict) else \"\"\n    error_desc = body.get(\"\
          error_description\", \"\") if isinstance(body, dict) else \"\"\n\n    #\
          \ Âè™Ë¶ÅÊàêÂäüËøîÂõûÂ∞±Áªô tokenÔºõÂê¶ÂàôÊääÈîôËØØ‰ø°ÊÅØÂ∏¶‰∏ä\n    return {\n        \"access_token\": token\n\
          \    }"
        code_language: python3
        desc: ''
        outputs:
          access_token:
            children: null
            type: string
        selected: false
        title: GetToken
        type: code
        variables:
        - value_selector:
          - env
          - APALEO_CLIENT_SECRET
          variable: client_secret
        - value_selector:
          - env
          - APALEO_CLIENT_ID
          variable: client_id
      height: 54
      id: '17587733257940'
      position:
        x: 402.45851748176574
        y: 282
      positionAbsolute:
        x: 402.45851748176574
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1758776454532'
          - message
          variable: message
        selected: false
        title: End
        type: end
      height: 90
      id: '1758774359371'
      position:
        x: 1480.8313696555676
        y: 282
      positionAbsolute:
        x: 1480.8313696555676
        y: 282
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nfrom typing import Any, Dict, List\n\ndef _fmt_money(amount,\
          \ currency):\n    try:\n        a = float(amount)\n        return f\"{a:.2f}\
          \ {currency}\" if currency else f\"{a:.2f}\"\n    except Exception:\n  \
          \      return f\"{amount} {currency}\".strip()\n\ndef main(offer: str, units:\
          \ int = 1):\n    \"\"\"\n    Input:\n      offer: JSON string of a single\
          \ Apaleo offer (prices are per room/unit)\n      units: number of rooms\
          \ requested by the guest (default 1)\n    Output:\n      {\"message\": \"\
          ...\"}  # single, polite, human-readable summary\n    \"\"\"\n    # Parse\
          \ the offer JSON\n    try:\n        data: Dict[str, Any] = json.loads(offer)\
          \ if isinstance(offer, str) else offer\n    except Exception:\n        return\
          \ {\"message\": \"‚ùå Unable to read offer details. Please try again or share\
          \ a new offer.\"}\n\n    # Extract common fields\n    arrival = data.get(\"\
          arrival\", \"\")\n    departure = data.get(\"departure\", \"\")\n\n    unit_group\
          \ = data.get(\"unitGroup\") or {}\n    room_name = unit_group.get(\"name\"\
          , \"\")\n    room_desc = unit_group.get(\"description\", \"\")\n\n    rate_plan\
          \ = data.get(\"ratePlan\") or {}\n    rate_plan_name = rate_plan.get(\"\
          name\", \"\")\n\n    total_obj = data.get(\"totalGrossAmount\") or {}\n\
          \    total_per_unit = total_obj.get(\"amount\")\n    currency = total_obj.get(\"\
          currency\", \"\")\n\n    time_slices: List[Dict[str, Any]] = data.get(\"\
          timeSlices\") or []\n\n    # Compute total per unit if missing at root (fallback:\
          \ sum of nightly amounts)\n    if total_per_unit is None:\n        s = 0.0\n\
          \        for ts in time_slices:\n            try:\n                s +=\
          \ float((ts.get(\"totalGrossAmount\") or {}).get(\"amount\", 0))\n     \
          \       except Exception:\n                pass\n        total_per_unit\
          \ = s\n\n    # Derive totals\n    try:\n        total_per_unit_float = float(total_per_unit\
          \ or 0.0)\n    except Exception:\n        total_per_unit_float = 0.0\n\n\
          \    total_all_units = total_per_unit_float * max(1, int(units))\n\n   \
          \ # Build message\n    lines = []\n\n    # Header\n    lines.append(\"‚ú®\
          \ Here is your best available offer:\")\n    if arrival and departure:\n\
          \        lines.append(f\"- Stay: {arrival} ‚Üí {departure}\")\n\n    # Room\
          \ & plan\n    if room_name:\n        lines.append(f\"- Room Type: {room_name}\"\
          )\n    if room_desc:\n        lines.append(f\"  ({room_desc})\")\n    if\
          \ rate_plan_name:\n        lines.append(f\"- Rate Plan: {rate_plan_name}\"\
          )\n\n    # Nightly breakdown (per room, then multiplied if units > 1)\n\
          \    if time_slices:\n        lines.append(\"\U0001F4C5 Nightly price (per\
          \ room):\")\n        for ts in time_slices:\n            night_from = ts.get(\"\
          from\", \"\")\n            amt = (ts.get(\"totalGrossAmount\") or {}).get(\"\
          amount\")\n            cur = (ts.get(\"totalGrossAmount\") or {}).get(\"\
          currency\", currency)\n            if amt is not None:\n               \
          \ per_room = _fmt_money(amt, cur)\n                if units and units >\
          \ 1:\n                    try:\n                        combined = float(amt)\
          \ * units\n                        lines.append(f\"  - {night_from}: {per_room}\
          \  |  {units} rooms: {_fmt_money(combined, cur)}\")\n                  \
          \  except Exception:\n                        lines.append(f\"  - {night_from}:\
          \ {per_room}\")\n                else:\n                    lines.append(f\"\
          \  - {night_from}: {per_room}\")\n\n    # Totals\n    if total_per_unit\
          \ is not None:\n        lines.append(f\"- Total (per room): {_fmt_money(total_per_unit,\
          \ currency)}\")\n    if units and units > 1:\n        lines.append(f\"-\
          \ Total for {units} rooms: {_fmt_money(total_all_units, currency)}\")\n\n\
          \    # Policies (if present)\n    cancel = data.get(\"cancellationFee\"\
          ) or {}\n    no_show = data.get(\"noShowFee\") or {}\n\n    cancel_desc\
          \ = cancel.get(\"description\", \"\")\n    cancel_until = cancel.get(\"\
          dueDateTime\", \"\")\n    if cancel_desc:\n        lines.append(f\"- Cancellation\
          \ Policy: {cancel_desc}\")\n    if cancel_until:\n        lines.append(f\"\
          \  Free cancellation until {cancel_until}\")\n\n    no_show_desc = no_show.get(\"\
          description\", \"\")\n    if no_show_desc:\n        lines.append(f\"- No-Show\
          \ Policy: {no_show_desc}\")\n\n    # Closing\n    if units and units > 1:\n\
          \        lines.append(\"Would you like to proceed with these rooms together?\"\
          )\n    else:\n        lines.append(\"Would you like to proceed with this\
          \ room?\")\n\n    return {\"message\": \"\\n\".join(lines)}"
        code_language: python3
        desc: ''
        outputs:
          message:
            children: null
            type: string
        selected: false
        title: Code 3
        type: code
        variables:
        - value_selector:
          - '1758772906371'
          - offer
          variable: offer
      height: 54
      id: '1758776454532'
      position:
        x: 1180.8313696555676
        y: 282
      positionAbsolute:
        x: 1180.8313696555676
        y: 282
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -444.23835489005666
      y: 412.63652717653383
      zoom: 0.4842919658209974
